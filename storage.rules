rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.email == 'ryanjbrant@gmail.com' || 
         firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Allow read access to all authenticated users
    match /{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Specific rules for models and thumbnails
    match /models/{userId}/{generationId}/{file} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    match /thumbnails/{userId}/{generationId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Resources storage rules
    match /resources/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write, create, delete: if isAdmin();
    }
  }
}